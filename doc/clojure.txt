*clojure.txt*	Clojure runtime files

INTRODUCTION						*clojure-introduction*

Clojure runtime files for Vim.


CLOJURE					*ft-clojure-indent* *clojure-indent*

By default Clojure.vim will attempt to follow the indentation rules in the
Clojure Style Guide, [1] but various configuration options are provided to
alter the indentation as you prefer.

[1]: https://guide.clojure.style

WARNING: if your installation of Vim does not include `searchpairpos()`, the
indent script falls back to normal 'lisp' and 'lispwords' indenting,
ignoring the following indentation options.

						*b:clojure_indent_rules*
						*g:clojure_indent_rules*

TODO: add this option and write this section.

					*b:clojure_align_multiline_strings*
					*g:clojure_align_multiline_strings*

Alter alignment of newly created lines within multi-line strings (and regular
expressions).
>
	;; let g:clojure_align_multiline_strings = 0  " Default
	(def default
	  "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
	  eiusmod tempor incididunt ut labore et dolore magna aliqua.")

	;; let g:clojure_align_multiline_strings = 1
	(def aligned
	  "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
	   eiusmod tempor incididunt ut labore et dolore magna aliqua.")

	;; let g:clojure_align_multiline_strings = -1
	(def traditional
	  "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
	eiusmod tempor incididunt ut labore et dolore magna aliqua.")
<
NOTE: indenting the string with |=| will not alter the indentation of existing
multi-line strings as that would break intentional formatting.

						*g:clojure_align_subforms*

By default, parenthesized compound forms that look like function calls and
whose head subform is on its own line have subsequent subforms indented by
two spaces relative to the opening paren:
>
	(foo
	  bar
	  baz)
<
Setting this option to `1` changes this behaviour so that all subforms are
aligned to the same column, emulating the default behaviour of
clojure-mode.el:
>
	(foo
	 bar
	 baz)
<

CLOJURE							*ft-clojure-syntax*

						*g:clojure_syntax_keywords*

Syntax highlighting of public vars in "clojure.core" is provided by default,
but additional symbols can be highlighted by adding them to the
|g:clojure_syntax_keywords| variable.  The value should be a |Dictionary| of
syntax group names, each containing a |List| of identifiers.
>
	let g:clojure_syntax_keywords = {
	    \   'clojureMacro': ["defproject", "defcustom"],
	    \   'clojureFunc': ["string/join", "string/replace"]
	    \ }
<
Refer to the Clojure syntax script for valid syntax group names.

There is also *b:clojure_syntax_keywords* which is a buffer-local variant of
this variable intended for use by plugin authors to highlight symbols
dynamically.

By setting the *b:clojure_syntax_without_core_keywords* variable, vars from
"clojure.core" will not be highlighted by default.  This is useful for
namespaces that have set `(:refer-clojure :only [])`


							*g:clojure_fold*

Setting |g:clojure_fold| to `1` will enable the folding of Clojure code.  Any
list, vector or map that extends over more than one line can be folded using
the standard Vim |fold-commands|.


						*g:clojure_discard_macro*

Set this variable to `1` to enable basic highlighting of Clojure's "discard
reader macro".
>
	#_(defn foo [x]
	    (println x))
<
Note that this option will not correctly highlight stacked discard macros
(e.g. `#_#_`).


ABOUT							*clojure-about*

This document and associated runtime files are maintained at:
https://github.com/clojure-vim/clojure.vim

Maintainer: Alex Vear <alex@vear.uk>

syntax/clojure.vim,
ftdetect/clojure.vim,
ftplugin/clojure.vim,
indent/clojure.vim

	Distributed under the Vim license.  See |license|.

	Copyright 2007-2008 (c) Toralf Wittner <toralf.wittner@gmail.com>
	Copyright 2008-2012 (c) Meikel Brandmeyer <mb@kotka.de>
	Copyright 2013-2018 (c) Sung Pae <self@sungpae.com>
	Copyright 2020â€“2024 (c) The clojure-vim contributors

Last Change: %%RELEASE_DATE%%

 vim:tw=78:noet:sw=8:sts=8:ts=8:ft=help:norl:
