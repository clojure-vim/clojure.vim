*clojure.txt*	Clojure runtime files

INTRODUCTION						*clojure-introduction*

Clojure runtime files for Vim.


CLOJURE					*ft-clojure-indent*  *clojure-indent*

Clojure indentation differs somewhat from traditional Lisps, due in part to
the use of square and curly brackets, and otherwise by community convention.
As these conventions are not universally followed, the Clojure indent script
offers ways to adjust the indentation.


						*g:clojure_indent_style*
						*b:clojure_indent_style*

The `clojure_indent_style` config option controls the general indentation style
to use.  Choose from several common presets:

* `standard` (default):
  Conventional Clojure indentation.  (Clojure Style Guide [1]) >

	|(filter even?
	|        [1 2 3])
	|
	|(filter
	| even?
	| [1 2 3])
<
* `traditional`:
  Indent like traditional Lisps. >

	|(filter even?
	|        [1 2 3])
	|
	|(filter
	|  even?
	|  [1 2 3])
<
* `uniform`:
  Indent uniformly to 2 spaces with no alignment (aka Tonsky indentation [2]).
>
	|(filter even?
	|  [1 2 3])
	|
	|(filter
	|  even?
	|  [1 2 3])
<
[1]: https://guide.clojure.style/
[2]: https://tonsky.me/blog/clojurefmt/


						*g:clojure_indent_rules*
						*b:clojure_indent_rules*

TODO: add this option and write this section.


					*g:clojure_fuzzy_indent_patterns*
					*b:clojure_fuzzy_indent_patterns*

TODO: add this option and write this section.


					*g:clojure_indent_multiline_strings*
					*b:clojure_indent_multiline_strings*

Control alignment of new lines within Clojure multi-line strings and regular
expressions with `clojure_indent_multiline_strings`.

NOTE: indenting with |=| will not alter the indentation within multi-line
strings, as this could break intentional formatting.

Pick from the following multi-line string indent styles:

* `standard` (default):
  Align to the front of the `"` or `#"` delimiter.  Ideal for doc-strings.
>
	|(def standard
	|  "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
	|  eiusmod tempor incididunt ut labore et dolore magna aliqua.")
<
* `pretty`:
  Align to the back of the `"` or `#"` delimiter.
>
	|(def pretty
	|  "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
	|   eiusmod tempor incididunt ut labore et dolore magna aliqua.")
<
* `traditional`:
  No indent, align to left edge of the file.
>
	|(def traditional
	|  "Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do
	|eiusmod tempor incididunt ut labore et dolore magna aliqua.")
<

						*clojure-indent-deprecations*

During the Clojure indentation script rebuild, the following configuration
options were removed/replaced:

* *g:clojure_maxlines*                -> none
* *g:clojure_cljfmt_compat*:          -> |g:clojure_indent_style|
* *g:clojure_align_subforms*          -> |g:clojure_indent_style|
* *g:clojure_align_multiline_strings* -> |g:clojure_indent_multiline_strings|
* *g:clojure_special_indent_words*:   -> |g:clojure_indent_rules|
* *g:clojure_fuzzy_indent*:           -> none
* *g:clojure_fuzzy_indent_blacklist*: -> none
* |'lispwords'|                       -> |g:clojure_indent_rules|


CLOJURE							*ft-clojure-syntax*


						*g:clojure_syntax_keywords*

Syntax highlighting of public vars in "clojure.core" is provided by default,
but additional symbols can be highlighted by adding them to the
|g:clojure_syntax_keywords| variable.  The value should be a |Dictionary| of
syntax group names, each containing a |List| of identifiers.
>
	let g:clojure_syntax_keywords = {
	    \   'clojureMacro': ["defproject", "defcustom"],
	    \   'clojureFunc': ["string/join", "string/replace"]
	    \ }
<
Refer to the Clojure syntax script for valid syntax group names.

There is also *b:clojure_syntax_keywords* which is a buffer-local variant of
this variable intended for use by plugin authors to highlight symbols
dynamically.

By setting the *b:clojure_syntax_without_core_keywords* variable, vars from
"clojure.core" will not be highlighted by default.  This is useful for
namespaces that have set `(:refer-clojure :only [])`


							*g:clojure_fold*

Setting |g:clojure_fold| to `1` will enable the folding of Clojure code.  Any
list, vector or map that extends over more than one line can be folded using
the standard Vim |fold-commands|.


						*g:clojure_discard_macro*

Set this variable to `1` to enable basic highlighting of Clojure's "discard
reader macro".
>
	#_(defn foo [x]
	    (println x))
<
Note that this option will not correctly highlight stacked discard macros
(e.g. `#_#_`).


ABOUT							*clojure-about*

This document and associated runtime files are maintained at:
https://github.com/clojure-vim/clojure.vim

Maintainer: Alex Vear <alex@vear.uk>

syntax/clojure.vim,
ftdetect/clojure.vim,
ftplugin/clojure.vim,
indent/clojure.vim

	Distributed under the Vim license.  See |license|.

	Copyright 2007-2008 (c) Toralf Wittner <toralf.wittner@gmail.com>
	Copyright 2008-2012 (c) Meikel Brandmeyer <mb@kotka.de>
	Copyright 2013-2018 (c) Sung Pae <self@sungpae.com>
	Copyright 2020â€“2024 (c) The clojure-vim contributors

Last Change: %%RELEASE_DATE%%

 vim:tw=78:noet:sw=8:sts=8:ts=8:ft=help:norl:
